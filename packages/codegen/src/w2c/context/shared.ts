import type { GeneratedImport } from '../types.js';
import { W2CCodegenLocalImportedModule } from './codegen-context.js';
import { W2CModuleContext } from './context.js';

/**
 * Represents an imported module in the shared context.
 *
 * This represents an imported module with imported symbols across all generated modules.
 */
export class W2CImportedModule {
  /**
   * Information about the imported module
   */
  private readonly moduleInfo: W2CCodegenLocalImportedModule;

  /**
   * All imported symbols from this module, across all generated modules.
   */
  public readonly imports: GeneratedImport[];

  constructor(
    moduleInfo: W2CCodegenLocalImportedModule,
    imports: GeneratedImport[]
  ) {
    this.moduleInfo = moduleInfo;
    this.imports = imports;
  }

  /**
   * Name of the imported module.
   */
  public get name(): string {
    return this.moduleInfo.name;
  }

  /**
   * Mangled name of the imported module.
   */
  public get managedName(): string {
    return this.moduleInfo.name;
  }

  /**
   * Gets the C typename that was generated by wasm2c for this imported module.
   */
  public get generatedRootContextFieldName(): string {
    return this.moduleInfo.generatedRootContextFieldName;
  }

  /**
   * Gets the name of field of root context struct, that was generated by wasm2c for this imported module.
   */
  public get generatedContextTypeName(): string {
    return this.moduleInfo.generatedContextTypeName;
  }
}

export class W2CSharedContext {
  public readonly modules: W2CModuleContext[];
  public readonly importedModules: W2CImportedModule[];

  constructor(modules: W2CModuleContext[]) {
    this.modules = modules;
    this.importedModules = processImportedModules(this.modules);
  }
}

function processImportedModules(
  modules: W2CModuleContext[]
): W2CImportedModule[] {
  const allImports = modules.flatMap((module) => module.codegen.imports);

  const importsGroupedByName = Object.groupBy(
    allImports,
    (el) => el.moduleInfo.name
  );

  const nameToInfoMap = Object.groupBy(
    allImports.map((el) => el.moduleInfo),
    (el) => el.name
  );

  return Object.entries(importsGroupedByName)
    .map(([moduleName, imports]) => {
      const info = nameToInfoMap[moduleName]?.[0];

      if (!info) {
        throw new Error(`Could not find info for module ${moduleName}`);
      }

      return new W2CImportedModule(info, imports ?? []);
    })
    .filter(Boolean);
}
